package main

import (
	"database/sql"
	"net/http"

	"github.com/gin-gonic/gin"
)

// generate random data for line chart
// func generateBarItems(length *[]DailyGraph) []opts.LineData {
// 	items := make([]opts.LineData, 0)
// 	for _, item := range *length {
// 		items = append(items, opts.LineData{Value: item.Count, Name: item.Product})
// 	}
// 	return items
// }

// // GetDays renders the results day by day as counts
// func GetDays(c *gin.Context) {
// 	dbType := "mysql"
// 	db := loadEnv().connect(dbType)
// 	length := getUsedProductPerDays(db)
// 	db.Close()
// 	titles := []string{}
// 	for _, title := range *length {
// 		titles = append(titles, title.Days)
// 	}
// 	bar := charts.NewLine()
// 	// set some global options like Title/Legend/ToolTip or anything else
// 	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
// 		Title:    "My first bar chart generated by go-echarts",
// 		Subtitle: "It's extremely easy to use, right?",
// 	}))
// 	bar.Tooltip.Show = true
// 	// Put data into instance
// 	bar.SetXAxis(titles).
// 		AddSeries("Days", generateBarItems(length))
// 	// Where the magic happens

// 	bar.Render(c.Writer)
// }

// func dailyBar() *charts.Line {
// 	dbType := "mysql"
// 	db := loadEnv().connect(dbType)
// 	length := getUsedProductPerDays(db)
// 	db.Close()
// 	titles := []string{}
// 	for _, title := range *length {
// 		titles = append(titles, title.Days)
// 	}
// 	bar := charts.NewLine()
// 	// set some global options like Title/Legend/ToolTip or anything else
// 	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
// 		Title:    "Day's wise",
// 		Subtitle: "day's wise clicked counts",
// 	}))
// 	bar.Tooltip.Show = true
// 	// Put data into instance
// 	bar.SetXAxis(titles).
// 		AddSeries("Days", generateBarItems(length))
// 	// Where the magic happens
// 	return bar
// }

// func barBasic(length *[]DailyGraph, titles []string) *charts.Line {
// 	// log.Println(titles)
// 	bar := charts.NewLine()
// 	// set some global options like Title/Legend/ToolTip or anything else
// 	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
// 		Title:    "Today's Clicked",
// 		Subtitle: "applications you have clicked today",
// 	}))
// 	bar.Tooltip.Show = true
// 	// bar.Tooltip.Formatter = fmt.Sprintf("daily based code\n product: count:")
// 	// Put data into instance
// 	bar.SetXAxis(titles).
// 		AddSeries("Today's clicks", generateBarItems(length))
// 	return bar

// }

// func fullReport() *charts.Line {
// 	dbType := "mysql"
// 	db := loadEnv().connect(dbType)
// 	length := getUsedProductPerDaysFull(db)
// 	db.Close()
// 	titles := []string{}
// 	for _, title := range *length {
// 		titles = append(titles, title.Days)
// 	}
// 	bar := charts.NewLine()
// 	// set some global options like Title/Legend/ToolTip or anything else
// 	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
// 		Title:    "Day's wise",
// 		Subtitle: "day's wise clicked counts",
// 	}))
// 	bar.Tooltip.Show = true
// 	// Put data into instance
// 	bar.SetXAxis(titles).
// 		AddSeries("Days", generateBarItems(length))
// 	// Where the magic happens
// 	return bar
// }

// func Report(c *gin.Context) {
// 	dbType := "mysql"
// 	db := loadEnv().connect(dbType)
// 	length := getUsedProductPerDayFull(db)
// 	db.Close()
// 	titles := []string{}
// 	for _, title := range *length {
// 		titles = append(titles, title.Product)
// 	}
// 	page := components.NewPage()
// 	page.AddCharts(
// 		barBasic(length, titles),
// 		fullReport(),
// 	)
// 	// log.Println(titles)
// 	// bar := charts.NewLine()
// 	// // set some global options like Title/Legend/ToolTip or anything else
// 	// bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
// 	// 	Title:    "My first bar chart generated by go-echarts",
// 	// 	Subtitle: "It's extremely easy to use, right?",
// 	// }))
// 	// bar.Tooltip.Show = true
// 	// // bar.Tooltip.Formatter = fmt.Sprintf("daily based code\n product: count:")
// 	// // Put data into instance
// 	// bar.SetXAxis(titles).
// 	// 	AddSeries("Today's clicks", generateBarItems(length))

// 	page.Render(c.Writer)
// }

// // Daily renders the all clicks on today and the applications where user(I) clicked
// func Daily(c *gin.Context) {
// 	dbType := "mysql"
// 	db := loadEnv().connect(dbType)
// 	length := getUsedProductPerDay(db)
// 	db.Close()
// 	titles := []string{}
// 	for _, title := range *length {
// 		titles = append(titles, title.Product)
// 	}
// 	page := components.NewPage()
// 	page.AddCharts(
// 		barBasic(length, titles),
// 		dailyBar(),
// 	)
// 	page.Render(c.Writer)
// }

func todaysOffice(db *sql.DB) ([]string, []int) {
	length := getUsedProductPerDay(db)
	return generateSlices(length)
}

func daysUsed(db *sql.DB) ([]string, []int) {
	length := getUsedProductPerDaysFull(db)
	return generateSlicesDates(length)
}

func todaysUsed(db *sql.DB) ([]string, []int) {
	length := getUsedProductPerDayFull(db)
	return generateSlices(length)
}

func getOfficeDays(db *sql.DB) ([]string, []int) {
	length := getUsedProductPerDays(db)
	return generateSlicesDates(length)
}

func generateSlices(length *[]DailyGraph) ([]string, []int) {
	titles := []string{}
	counts := []int{}
	for _, title := range *length {
		titles = append(titles, title.Product)
		counts = append(counts, title.Count)
	}
	return titles, counts
}

func generateSlicesDates(length *[]DailyGraph) ([]string, []int) {
	titles := []string{}
	counts := []int{}
	for _, title := range *length {
		titles = append(titles, title.Days)
		counts = append(counts, title.Count)
	}
	return titles, counts
}

// Userdashboard shows the visual activities for each user after login
func Userdashboard(c *gin.Context) {
	dbType := "mysql"
	db := loadEnv().connect(dbType)
	titles, counts := todaysOffice(db)
	daystitles, dayscounts := daysUsed(db)
	officedayTitles, officeDayCounts := getOfficeDays(db)
	todayFulltitle, todayFullcount := todaysUsed(db)
	db.Close()

	c.HTML(http.StatusOK, "user_dashboard.tmpl.html", gin.H{
		"officetodaytitles": titles,
		"officetodayInfo":   counts,
		"daysTitle":         daystitles,
		"daysCounts":        dayscounts,
		"officeDays":        officedayTitles,
		"officeDaysCounts":  officeDayCounts,
		"todayFullTitle":    todayFulltitle,
		"todayFulCount":     todayFullcount,
	})
}
